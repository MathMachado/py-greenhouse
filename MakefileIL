staged := $(shell git diff --staged --diff-filter=d --name-only | grep "models.*\.sql$$")
target = local
ifeq ($(target), dev)
	DBT_SNAPSHOT_ROLE=dev_snapshotter
	DBT_RUN_ROLE=dev_transformer
else ifeq ($(target), acc)
	DBT_RUN_ROLE=acc_transformer
else ifeq ($(target), prod)
	DBT_SNAPSHOT_ROLE=prod_snapshotter
	DBT_RUN_ROLE=prod_transformer
endif

merge:
	@test -n "$(IL_ENV)" 2>/dev/null || { echo >&2 "IL_ENV is required."; exit 1; }
	git checkout $(IL_ENV)
	git pull --rebase
	git merge master
	git push
	git checkout master

merge-acc: IL_ENV=acceptance
merge-acc: merge

merge-prod: IL_ENV=production
merge-prod: merge

run:
	DBT_ROLE=$(DBT_RUN_ROLE) poetry run dbt run --target $(target)

snapshot:
	DBT_ROLE=$(DBT_SNAPSHOT_ROLE) poetry run dbt snapshot --target $(target)

seed:
	DBT_ROLE=$(DBT_RUN_ROLE) poetry run dbt seed --full-refresh --target $(target)

docs:
	DBT_ROLE=$(DBT_RUN_ROLE) poetry run dbt docs generate --target $(target)

compile:
	poetry run dbt compile

test:
	poetry run dbt test

install:
	@echo Installing dependencies
	poetry install
	poetry run dbt deps
	poetry run whippet --assume-yes

gatekeeper:
	poetry run python -u bin/gatekeeper.py

black:
	poetry run black --check .

pre-push: gatekeeper

lint: black
	poetry run sqlfluff lint

pre-commit: black
ifdef staged
	poetry run sqlfluff lint $(staged)

endif

.PHONY: black compile gatekeeper install lint merge merge-acc merge-prod pre-commit pre-push run snapshot test
